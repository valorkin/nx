{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "expo",
  "packageName": "@nrwl/expo",
  "description": "The Expo Plugin for Nx contains executors and generators for managing and developing an expo application within your workspace. For example, you can directly build for different target platforms as well as generate projects and publish your code.",
  "root": "/packages/expo",
  "source": "/packages/expo/src",
  "documentation": [],
  "generators": [
    {
      "name": "init",
      "factory": "./src/generators/init/init#expoInitGenerator",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoInit",
        "$schema": "http://json-schema.org/schema",
        "title": "Add Nx Expo Schematics",
        "type": "object",
        "properties": {
          "unitTestRunner": {
            "description": "Adds the specified unit test runner",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "skipFormat": {
            "description": "Skip formatting files",
            "type": "boolean",
            "default": false
          },
          "e2eTestRunner": {
            "description": "Adds the specified e2e test runner",
            "type": "string",
            "enum": ["detox", "none"],
            "default": "detox"
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Initialize the @nrwl/expo plugin",
      "hidden": true,
      "implementation": "/packages/expo/src/generators/init/init#expoInitGenerator.ts",
      "aliases": [],
      "path": "/packages/expo/src/generators/init/schema.json"
    },
    {
      "name": "application",
      "factory": "./src/generators/application/application#expoApplicationGenerator",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoApplication",
        "$schema": "http://json-schema.org/schema",
        "title": "Create an Expo Application for Nx",
        "examples": [
          {
            "command": "g app myapp --directory=nested",
            "description": "Generate apps/nested/myapp"
          },
          {
            "command": "g app myapp --classComponent",
            "description": "Use class components instead of functional components"
          }
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the application.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for the application?"
          },
          "displayName": {
            "description": "The display name to show in the application. Defaults to name.",
            "type": "string"
          },
          "directory": {
            "description": "The directory of the new application.",
            "type": "string",
            "alias": "d"
          },
          "skipFormat": {
            "description": "Skip formatting files",
            "type": "boolean",
            "default": false
          },
          "linter": {
            "description": "The tool to use for running lint checks.",
            "type": "string",
            "enum": ["eslint"],
            "default": "eslint"
          },
          "unitTestRunner": {
            "type": "string",
            "enum": ["jest", "none"],
            "description": "Test runner to use for unit tests",
            "default": "jest"
          },
          "tags": {
            "type": "string",
            "description": "Add tags to the application (used for linting)",
            "alias": "t"
          },
          "js": {
            "type": "boolean",
            "description": "Generate JavaScript files rather than TypeScript files",
            "default": false
          },
          "setParserOptionsProject": {
            "type": "boolean",
            "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
            "default": false
          },
          "e2eTestRunner": {
            "description": "Adds the specified e2e test runner",
            "type": "string",
            "enum": ["detox", "none"],
            "default": "detox"
          },
          "standaloneConfig": {
            "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
            "type": "boolean"
          }
        },
        "required": ["name"],
        "presets": []
      },
      "aliases": ["app"],
      "x-type": "application",
      "description": "Create an application",
      "implementation": "/packages/expo/src/generators/application/application#expoApplicationGenerator.ts",
      "hidden": false,
      "path": "/packages/expo/src/generators/application/schema.json"
    },
    {
      "name": "library",
      "factory": "./src/generators/library/library#expoLibraryGenerator",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoLibrary",
        "$schema": "http://json-schema.org/schema",
        "title": "Create a Expo Library for Nx",
        "type": "object",
        "examples": [
          {
            "command": "g lib mylib --directory=myapp",
            "description": "Generate libs/myapp/mylib"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Library name",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for the library?",
            "pattern": "^[a-zA-Z].*$"
          },
          "directory": {
            "type": "string",
            "description": "A directory where the lib is placed.",
            "alias": "d"
          },
          "linter": {
            "description": "The tool to use for running lint checks.",
            "type": "string",
            "enum": ["eslint"],
            "default": "eslint"
          },
          "unitTestRunner": {
            "type": "string",
            "enum": ["jest", "none"],
            "description": "Test runner to use for unit tests.",
            "default": "jest"
          },
          "tags": {
            "type": "string",
            "description": "Add tags to the library (used for linting).",
            "alias": "t"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipTsConfig": {
            "type": "boolean",
            "default": false,
            "description": "Do not update tsconfig.json for development experience."
          },
          "pascalCaseFiles": {
            "type": "boolean",
            "description": "Use pascal case component file name (e.g. App.tsx).",
            "alias": "P",
            "default": false
          },
          "publishable": {
            "type": "boolean",
            "description": "Create a publishable library."
          },
          "buildable": {
            "type": "boolean",
            "default": false,
            "description": "Generate a buildable library."
          },
          "importPath": {
            "type": "string",
            "description": "The library name used to import it, like @myorg/my-awesome-lib"
          },
          "js": {
            "type": "boolean",
            "description": "Generate JavaScript files rather than TypeScript files.",
            "default": false
          },
          "globalCss": {
            "type": "boolean",
            "description": "When true, the stylesheet is generated using global CSS instead of CSS modules (e.g. file is '*.css' rather than '*.module.css').",
            "default": false
          },
          "strict": {
            "type": "boolean",
            "description": "Whether to enable tsconfig strict mode or not.",
            "default": true
          },
          "setParserOptionsProject": {
            "type": "boolean",
            "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
            "default": false
          }
        },
        "required": ["name"],
        "presets": []
      },
      "aliases": ["lib"],
      "x-type": "library",
      "description": "Create a library",
      "implementation": "/packages/expo/src/generators/library/library#expoLibraryGenerator.ts",
      "hidden": false,
      "path": "/packages/expo/src/generators/library/schema.json"
    },
    {
      "name": "component",
      "factory": "./src/generators/component/component#expoComponentGenerator",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoComponent",
        "$schema": "http://json-schema.org/schema",
        "title": "Create a Expo Component for Nx",
        "type": "object",
        "examples": [
          {
            "command": "g component my-component --project=mylib",
            "description": "Generate a component in the mylib library"
          },
          {
            "command": "g component my-component --project=mylib --classComponent",
            "description": "Generate a class component in the mylib library"
          }
        ],
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of the project.",
            "alias": "p",
            "$default": { "$source": "projectName" },
            "x-prompt": "What is the name of the project for this component?"
          },
          "name": {
            "type": "string",
            "description": "The name of the component.",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for the component?"
          },
          "js": {
            "type": "boolean",
            "description": "Generate JavaScript files rather than TypeScript files.",
            "default": false
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipTests": {
            "type": "boolean",
            "description": "When true, does not create \"spec.ts\" test files for the new component.",
            "default": false
          },
          "directory": {
            "type": "string",
            "description": "Create the component under this directory (can be nested).",
            "alias": "d"
          },
          "flat": {
            "type": "boolean",
            "description": "Create component at the source root rather than its own directory.",
            "default": false
          },
          "export": {
            "type": "boolean",
            "description": "When true, the component is exported from the project index.ts (if it exists).",
            "alias": "e",
            "default": false,
            "x-prompt": "Should this component be exported in the project?"
          },
          "pascalCaseFiles": {
            "type": "boolean",
            "description": "Use pascal case component file name (e.g. App.tsx).",
            "alias": "P",
            "default": false
          },
          "classComponent": {
            "type": "boolean",
            "alias": "C",
            "description": "Use class components instead of functional component.",
            "default": false
          }
        },
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Create a component",
      "aliases": ["c"],
      "implementation": "/packages/expo/src/generators/component/component#expoComponentGenerator.ts",
      "hidden": false,
      "path": "/packages/expo/src/generators/component/schema.json"
    }
  ],
  "executors": [
    {
      "name": "update",
      "implementation": "/packages/expo/src/executors/update/update.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoEasUpdate",
        "cli": "nx",
        "title": "Expo EAS Update executor",
        "description": "Start an EAS update for your expo project",
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Branch to publish the update group on"
          },
          "message": {
            "type": "string",
            "description": "A short message describing the update"
          },
          "republish": {
            "type": "boolean",
            "description": "Enable JSON output, non-JSON messages will be printed to stderr",
            "default": false
          },
          "group": {
            "type": "string",
            "description": "Update group to republish"
          },
          "inputDir": {
            "type": "string",
            "description": "Location of the bundle"
          },
          "skipBundler": {
            "type": "boolean",
            "description": "Skip running Expo CLI to bundle the app before publishing",
            "default": false
          },
          "platform": {
            "enum": ["ios", "android", "all"],
            "alias": "p",
            "description": "The platform to build the app, example values: ios, android, all.",
            "default": "all"
          },
          "json": {
            "type": "boolean",
            "description": "Enable JSON output, non-JSON messages will be printed to stderr",
            "default": false
          },
          "auto": {
            "type": "boolean",
            "description": "Use the current git branch and commit message for the EAS branch and update message",
            "default": false
          },
          "privateKeyPath": {
            "type": "string",
            "description": "File containing the PEM-encoded private key corresponding to the certificate in expo-updates' configuration. Defaults to a file named \"private-key.pem\" in the certificate's directory."
          },
          "nonInteractive": {
            "type": "boolean",
            "description": "Run command in non-interactive mode",
            "default": false
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Start an EAS update for your expo project",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/update/schema.json"
    },
    {
      "name": "build",
      "implementation": "/packages/expo/src/executors/build/build.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoEasBuild",
        "cli": "nx",
        "title": "Expo EAS Build executor",
        "description": "Start an EAS build for your expo project",
        "type": "object",
        "properties": {
          "platform": {
            "enum": ["ios", "android", "all"],
            "alias": "p",
            "description": "The platform to build the app, example values: ios, android, all."
          },
          "json": {
            "type": "boolean",
            "description": "Enable JSON output, non-JSON messages will be printed to stderr",
            "default": false
          },
          "profile": {
            "type": "string",
            "description": "Name of the build profile from eas.json. Defaults to \"production\" if defined in eas.json.",
            "examples": ["PROFILE_NAME"]
          },
          "nonInteractive": {
            "type": "boolean",
            "description": "Run command in non-interactive mode",
            "default": false
          },
          "local": {
            "type": "boolean",
            "description": "Run build locally [experimental]",
            "default": false
          },
          "wait": {
            "type": "boolean",
            "description": "Wait for build(s) to complete",
            "default": true
          },
          "clearCache": {
            "type": "boolean",
            "description": "Clear cache before the build",
            "default": false
          },
          "autoSubmit": {
            "type": "boolean",
            "description": "Submit on build complete using the submit profile with the same name as the build profile",
            "default": false
          },
          "autoSubmitWithProfile": {
            "type": "string",
            "description": "Submit on build complete using the submit profile with provided name",
            "examples": ["PROFILE_NAME"]
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Start an EAS build for your expo project",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build/schema.json"
    },
    {
      "name": "build-list",
      "implementation": "/packages/expo/src/executors/build-list/build-list.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoEasBuildList",
        "cli": "nx",
        "title": "Expo EAS Build List executor",
        "description": "List all EAS builds for your Expo project",
        "type": "object",
        "properties": {
          "platform": {
            "enum": ["ios", "android", "all"],
            "alias": "p",
            "description": "The platform to build the app, example values: ios, android, all."
          },
          "json": {
            "type": "boolean",
            "description": "Enable JSON output, non-JSON messages will be printed to stderr"
          },
          "status": {
            "enum": [
              "new",
              "in-queue",
              "in-progress",
              "errored",
              "finished",
              "canceled"
            ],
            "description": "Status of EAS build"
          },
          "distribution": {
            "enum": ["store", "internal", "simulator"],
            "description": "Distribution of EAS build"
          },
          "channel": {
            "type": "string",
            "description": "Channel of EAS build"
          },
          "appVersion": {
            "type": "string",
            "description": "App version of EAS build"
          },
          "appBuildVersion": {
            "type": "string",
            "description": "App build version of EAS build"
          },
          "sdkVersion": {
            "type": "string",
            "description": "SDK version of EAS build"
          },
          "runtimeVersion": {
            "type": "string",
            "description": "Runtime version of EAS build"
          },
          "appIdentifier": {
            "type": "string",
            "description": "App identifier of EAS build"
          },
          "buildProfile": {
            "type": "string",
            "description": "Build profile of EAS build"
          },
          "gitCommitHash": {
            "type": "string",
            "description": "Git commit hash of EAS build"
          },
          "limit": {
            "type": "number",
            "description": "Limit of numbers to list EAS builds"
          }
        },
        "required": [],
        "presets": []
      },
      "description": "List all EAS builds for your Expo project",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build-list/schema.json"
    },
    {
      "name": "download",
      "implementation": "/packages/expo/src/executors/download/download.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoDownloadEasBuild",
        "cli": "nx",
        "title": "Download EAS Build executor",
        "description": "Download an EAS build",
        "type": "object",
        "properties": {
          "platform": {
            "enum": ["ios", "android"],
            "alias": "p",
            "description": "The platform to build the app, example values: ios, android, all."
          },
          "distribution": {
            "enum": ["store", "internal", "simulator"],
            "description": "Distribution of EAS build"
          },
          "channel": {
            "type": "string",
            "description": "Channel of EAS build"
          },
          "appVersion": {
            "type": "string",
            "description": "App version of EAS build"
          },
          "appBuildVersion": {
            "type": "string",
            "description": "App build version of EAS build"
          },
          "sdkVersion": {
            "type": "string",
            "description": "SDK version of EAS build"
          },
          "runtimeVersion": {
            "type": "string",
            "description": "Runtime version of EAS build"
          },
          "appIdentifier": {
            "type": "string",
            "description": "App identifier of EAS build"
          },
          "buildProfile": {
            "type": "string",
            "description": "Build profile of EAS build"
          },
          "gitCommitHash": {
            "type": "string",
            "description": "Git commit hash of EAS build"
          },
          "output": {
            "type": "string",
            "description": "Output directory for the download build"
          }
        },
        "required": ["output"],
        "presets": []
      },
      "description": "Download an EAS build",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/download/schema.json"
    },
    {
      "name": "build-ios",
      "implementation": "/packages/expo/src/executors/build-ios/build-ios.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoBuildIOS",
        "cli": "nx",
        "title": "Expo iOS Build executor",
        "description": "Build and sign a standalone IPA for the Apple App Store",
        "type": "object",
        "properties": {
          "clearCredentials": {
            "type": "boolean",
            "description": "Clear all credentials stored on Expo servers.",
            "alias": "c"
          },
          "clearDistCert": {
            "type": "boolean",
            "description": "Remove Distribution Certificate stored on Expo servers."
          },
          "clearPushKey": {
            "type": "boolean",
            "description": "Remove Push Notifications Key stored on Expo servers."
          },
          "clearPushCert": {
            "type": "boolean",
            "description": "Remove Push Notifications Certificate stored on Expo servers. Use of Push Notifications Certificates is deprecated."
          },
          "clearProvisioningProfile": {
            "type": "boolean",
            "description": "Remove Provisioning Profile stored on Expo servers."
          },
          "revokeCredentials": {
            "type": "boolean",
            "description": "Revoke credentials on developer.apple.com, select appropriate using --clear-* options.",
            "alias": "r"
          },
          "appleId": {
            "type": "string",
            "description": "Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable)."
          },
          "type": {
            "enum": ["archive", "simulator"],
            "description": "Type of build: [archive⎮simulator].",
            "alias": "t"
          },
          "releaseChannel": {
            "type": "string",
            "description": "Pull from specified release channel."
          },
          "noPublish": {
            "type": "boolean",
            "description": "Disable automatic publishing before building."
          },
          "noWait": {
            "type": "boolean",
            "description": "Exit immediately after scheduling build."
          },
          "teamId": { "type": "string", "description": "Apple Team ID." },
          "distP12Path": {
            "type": "string",
            "description": "Path to your Distribution Certificate P12 (set password as EXPO_IOS_DIST_P12_PASSWORD environment variable)."
          },
          "pushP8Path": {
            "type": "string",
            "description": "Path to your Push Key .p8 file."
          },
          "provisioningProfilePath": {
            "type": "string",
            "description": "Path to your Provisioning Profile."
          },
          "publicUrl": {
            "type": "string",
            "description": "The URL of an externally hosted manifest (for self-hosted apps)."
          },
          "skipCredentialsCheck": {
            "type": "boolean",
            "description": "Skip checking credentials."
          },
          "skipWorkflowCheck": {
            "type": "boolean",
            "description": "Skip warning about build service bare workflow limitations."
          },
          "sync": {
            "type": "boolean",
            "description": "Syncs npm dependencies to package.json (for React Native autolink). Always true when --install is used.",
            "default": true
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Build and sign a standalone IPA for the Apple App Store",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build-ios/schema.json"
    },
    {
      "name": "build-android",
      "implementation": "/packages/expo/src/executors/build-android/build-android.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoBuildAndroid",
        "cli": "nx",
        "title": "Expo Android Build executor",
        "description": "Build and sign a standalone APK or App Bundle for the Google Play Store",
        "type": "object",
        "properties": {
          "clearCredentials": {
            "type": "boolean",
            "description": "Clear all credentials stored on Expo servers.",
            "alias": "c"
          },
          "type": {
            "enum": ["app-bundle", "apk"],
            "description": "Type of build: [app-bundle⎮apk].",
            "alias": "t"
          },
          "releaseChannel": {
            "type": "string",
            "description": "Pull from specified release channel."
          },
          "noPublish": {
            "type": "boolean",
            "description": "Disable automatic publishing before building."
          },
          "noWait": {
            "type": "boolean",
            "description": "Exit immediately after scheduling build."
          },
          "keystorePath": {
            "type": "string",
            "description": "Path to your Keystore: *.jks."
          },
          "keystoreAlias": {
            "type": "string",
            "description": "Keystore Alias"
          },
          "publicUrl": {
            "type": "string",
            "description": "The URL of an externally hosted manifest (for self-hosted apps)."
          },
          "skipWorkflowCheck": {
            "type": "boolean",
            "description": "Skip warning about build service bare workflow limitations."
          },
          "sync": {
            "type": "boolean",
            "description": "Syncs npm dependencies to package.json (for React Native autolink). Always true when --install is used.",
            "default": true
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Build and sign a standalone APK or App Bundle for the Google Play Store",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build-android/schema.json"
    },
    {
      "name": "build-web",
      "implementation": "/packages/expo/src/executors/build-web/build-web.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoBuildWeb",
        "cli": "nx",
        "title": "Expo web Build executor",
        "description": "Build the web app for production",
        "type": "object",
        "properties": {
          "clear": {
            "type": "boolean",
            "description": "Clear all cached build files and assets.",
            "alias": "c"
          },
          "noPwa": {
            "type": "boolean",
            "description": "Prevent webpack from generating the manifest.json and injecting meta into the index.html head."
          },
          "dev": {
            "type": "boolean",
            "description": "Turns dev flag on before bundling"
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Build the web app for production",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build-web/schema.json"
    },
    {
      "name": "build-status",
      "implementation": "/packages/expo/src/executors/build-status/build-status.impl.ts",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxExpoBuildStatus",
        "cli": "nx",
        "title": "Expo web Build executor",
        "description": "Get the status of the latest build for the project",
        "type": "object",
        "properties": {
          "publicUrl": {
            "type": "string",
            "description": "The URL of an externally hosted manifest (for self-hosted apps)."
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Get the status of the latest build for the project",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/build-status/schema.json"
    },
    {
      "name": "publish",
      "implementation": "/packages/expo/src/executors/publish/publish.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoPublish",
        "$schema": "http://json-schema.org/schema",
        "title": "Publish for Expo",
        "description": "Deploy a project to Expo hosting",
        "type": "object",
        "properties": {
          "quiet": {
            "type": "boolean",
            "description": "Suppress verbose output from the Metro bundler",
            "default": false,
            "alias": "q"
          },
          "sendTo": {
            "type": "string",
            "description": "A phone number or email address to send a link to",
            "alias": "s"
          },
          "clear": {
            "type": "boolean",
            "description": "Clear the Metro bundler cache",
            "default": false,
            "alias": "c"
          },
          "target": {
            "enum": ["managed", "bare"],
            "default": "managed",
            "description": "Target environment for which this publish is intended. Options are managed or bare.",
            "alias": "t"
          },
          "maxWorkers": {
            "type": "number",
            "description": "Maximum number of tasks to allow Metro to spawn"
          },
          "releaseChannel": {
            "type": "string",
            "description": "The release channel to publish to. Default is 'default'.",
            "default": "default"
          }
        },
        "presets": []
      },
      "description": "Deploy a project to Expo hosting",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/publish/schema.json"
    },
    {
      "name": "publish-set",
      "implementation": "/packages/expo/src/executors/publish-set/publish-set.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoPublishSet",
        "$schema": "http://json-schema.org/schema",
        "title": "Set Publish Channel for Expo",
        "description": "Specify the channel to serve a published release",
        "type": "object",
        "properties": {
          "releaseChannel": {
            "type": "string",
            "description": "The release channel to publish to."
          },
          "publishId": {
            "type": "string",
            "description": "The id of the published release to serve from the channel."
          }
        },
        "required": ["releaseChannel", "publishId"],
        "presets": []
      },
      "description": "Specify the channel to serve a published release",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/publish-set/schema.json"
    },
    {
      "name": "rollback",
      "implementation": "/packages/expo/src/executors/rollback/rollback.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoRollback",
        "$schema": "http://json-schema.org/schema",
        "title": "Rollback Publish Command for Expo",
        "description": "Undo an update to a channel",
        "type": "object",
        "properties": {
          "releaseChannel": {
            "type": "string",
            "description": "The release channel to publish to."
          },
          "sdkVersion": {
            "type": "string",
            "description": "The sdk version to rollback."
          },
          "platform": {
            "enum": ["ios", "android"],
            "description": "The platform to rollback."
          }
        },
        "required": ["releaseChannel", "sdkVersion"],
        "presets": []
      },
      "description": "Undo an update to a channel",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/rollback/schema.json"
    },
    {
      "name": "run",
      "implementation": "/packages/expo/src/executors/run/run.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoRun",
        "$schema": "http://json-schema.org/schema",
        "title": "Run iOS or Android application",
        "description": "Run Expo target options",
        "type": "object",
        "properties": {
          "platform": {
            "description": "Platform to run for (ios, android).",
            "enum": ["ios", "android"],
            "default": "ios"
          },
          "xcodeConfiguration": {
            "type": "string",
            "description": "(iOS) Xcode configuration to use. Debug or Release",
            "default": "Debug"
          },
          "scheme": {
            "type": "string",
            "description": "(iOS) Explicitly set the Xcode scheme to use"
          },
          "variant": {
            "type": "string",
            "description": "(Android) Specify your app's build variant (e.g. debug, release).",
            "default": "debug"
          },
          "device": {
            "type": "string",
            "description": "Device name or UDID to build the app on. The value is not required if you have a single device connected.",
            "alias": "d"
          },
          "sync": {
            "type": "boolean",
            "description": "Syncs npm dependencies to package.json (for React Native autolink). Always true when --install is used.",
            "default": true
          },
          "port": {
            "type": "number",
            "description": "Port to start the Metro bundler on",
            "default": 8081,
            "alias": "p"
          },
          "bundler": {
            "type": "boolean",
            "description": "Whether to skip starting the Metro bundler. True to start it, false to skip it.",
            "default": true
          }
        },
        "required": ["platform"],
        "presets": []
      },
      "description": "Run the Android app binary locally or run the iOS app binary locally",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/run/schema.json"
    },
    {
      "name": "start",
      "implementation": "/packages/expo/src/executors/start/start.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoStart",
        "$schema": "http://json-schema.org/schema",
        "title": "Packager Server for Expo",
        "description": "Packager Server target options",
        "type": "object",
        "properties": {
          "port": {
            "type": "number",
            "description": "Port to start the native Metro bundler on (does not apply to web or tunnel)",
            "default": 19000,
            "alias": "p"
          },
          "clear": {
            "type": "boolean",
            "description": "Clear the Metro bundler cache",
            "alias": "c"
          },
          "maxWorkers": {
            "type": "number",
            "description": "Maximum number of tasks to allow Metro to spawn"
          },
          "dev": {
            "type": "boolean",
            "description": "Turn development mode on or off"
          },
          "devClient": {
            "type": "boolean",
            "description": "Experimental: Starts the bundler for use with the expo-development-client"
          },
          "minify": {
            "type": "boolean",
            "description": "Whether or not to minify code"
          },
          "https": {
            "type": "boolean",
            "description": "To start webpack with https or http protocol"
          },
          "scheme": {
            "type": "string",
            "description": "Custom URI protocol to use with a development build"
          },
          "sentTo": {
            "type": "string",
            "description": "An email address to send a link to",
            "alias": "s"
          },
          "android": {
            "type": "boolean",
            "description": "Opens your app in Expo Go on a connected Android device",
            "alias": "a"
          },
          "ios": {
            "type": "boolean",
            "description": "Opens your app in Expo Go in a currently running iOS simulator on your computer",
            "alias": "i"
          },
          "host": {
            "type": "string",
            "description": "lan (default), tunnel, localhost. Type of host to use. \"tunnel\" allows you to view your link on other networks",
            "alias": "m"
          },
          "tunnel": {
            "type": "boolean",
            "description": "Same as --host tunnel"
          },
          "lan": { "type": "boolean", "description": "Same as --host lan" },
          "localhost": {
            "type": "boolean",
            "description": "Same as --host localhost"
          },
          "offline": {
            "type": "boolean",
            "description": "Allows this command to run while offline"
          },
          "webpack": {
            "type": "boolean",
            "description": "Start a Webpack dev server for the web app."
          }
        },
        "presets": []
      },
      "description": "Start a local dev server for the app or start a Webpack dev server for the web app",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/start/schema.json"
    },
    {
      "name": "sync-deps",
      "implementation": "/packages/expo/src/executors/sync-deps/sync-deps.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoSyncDeps",
        "$schema": "http://json-schema.org/schema",
        "title": "Sync Deps for Expo",
        "description": "Updates package.json with project dependencies",
        "type": "object",
        "properties": {
          "include": {
            "type": "string",
            "description": "A comma-separated list of additional npm packages to include. e.g. 'nx sync-deps --include=react-native-gesture-handler,react-native-safe-area-context'"
          }
        },
        "presets": []
      },
      "description": "Syncs dependencies to package.json (required for autolinking).",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/sync-deps/schema.json"
    },
    {
      "name": "ensure-symlink",
      "implementation": "/packages/expo/src/executors/ensure-symlink/ensure-symlink.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoEnsureSymlink",
        "$schema": "http://json-schema.org/schema",
        "title": "Ensure Symlink for Expo",
        "description": "Ensure workspace node_modules is symlink under app's node_modules folder.",
        "type": "object",
        "properties": {},
        "presets": []
      },
      "description": "Ensure workspace node_modules is symlink under app's node_modules folder.",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/ensure-symlink/schema.json"
    },
    {
      "name": "eject",
      "implementation": "/packages/expo/src/executors/eject/eject.impl.ts",
      "schema": {
        "cli": "nx",
        "$id": "NxExpoEject",
        "$schema": "http://json-schema.org/schema",
        "title": "Expo Eject",
        "description": "Create native iOS and Android project files",
        "type": "object",
        "properties": {
          "install": {
            "type": "boolean",
            "description": "Install CocoaPods.",
            "default": true
          },
          "platform": {
            "type": "string",
            "description": "Platforms to sync",
            "default": "all",
            "examples": ["ios", "android", "all"]
          }
        },
        "presets": []
      },
      "description": "Create native iOS and Android project files.",
      "aliases": [],
      "hidden": false,
      "path": "/packages/expo/src/executors/eject/schema.json"
    }
  ]
}
