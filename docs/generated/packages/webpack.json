{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "webpack",
  "packageName": "@nrwl/webpack",
  "description": "The Nx Plugin for Webpack contains executors and generators that support building applications using Webpack.",
  "root": "/packages/webpack",
  "source": "/packages/webpack/src",
  "documentation": [],
  "generators": [
    {
      "name": "init",
      "factory": "./src/generators/init/init#webpackInitGenerator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxWebpackInit",
        "cli": "nx",
        "title": "Init Webpack Plugin",
        "description": "Init Webpack Plugin.",
        "type": "object",
        "properties": {
          "compiler": {
            "type": "string",
            "enum": ["babel", "swc", "tsc"],
            "description": "The compiler to initialize for.",
            "default": "babel"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Initialize the `@nrwl/webpack` plugin.",
      "aliases": ["ng-add"],
      "hidden": true,
      "implementation": "/packages/webpack/src/generators/init/init#webpackInitGenerator.ts",
      "path": "/packages/webpack/src/generators/init/schema.json"
    },
    {
      "name": "webpack-project",
      "factory": "./src/generators/webpack-project/webpack-project#webpackProjectGenerator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxWebpackProject",
        "cli": "nx",
        "title": "Add Webpack Configuration to a project",
        "description": "Add Webpack Configuration to a project.",
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of the project.",
            "$default": { "$source": "argv", "index": 0 },
            "x-dropdown": "project",
            "x-prompt": "What is the name of the project to set up a webpack for?"
          },
          "compiler": {
            "type": "string",
            "enum": ["babel", "swc", "tsc"],
            "description": "The compiler to use to build source.",
            "default": "babel"
          },
          "main": {
            "type": "string",
            "description": "Path relative to the workspace root for the main entry file. Defaults to '<projectRoot>/src/main.ts'."
          },
          "tsConfig": {
            "type": "string",
            "description": "Path relative to the workspace root for the tsconfig file to build with. Defaults to '<projectRoot>/tsconfig.app.json'."
          },
          "target": {
            "type": "string",
            "description": "Target platform for the build, same as the Webpack config option.",
            "enum": ["node", "web"],
            "default": "web"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipPackageJson": {
            "type": "boolean",
            "default": false,
            "description": "Do not add dependencies to `package.json`."
          },
          "devServer": {
            "type": "boolean",
            "description": "Add a serve target to run a local webpack dev-server",
            "default": false
          },
          "webpackConfig": {
            "type": "string",
            "description": "Path relative to workspace root to a custom webpack file that takes a config object and returns an updated config."
          }
        },
        "required": [],
        "presets": []
      },
      "description": "Add webpack configuration to a project.",
      "hidden": true,
      "implementation": "/packages/webpack/src/generators/webpack-project/webpack-project#webpackProjectGenerator.ts",
      "aliases": [],
      "path": "/packages/webpack/src/generators/webpack-project/schema.json"
    }
  ],
  "executors": [
    {
      "name": "webpack",
      "implementation": "/packages/webpack/src/executors/webpack/webpack.impl.ts",
      "schema": {
        "title": "Webpack Executor",
        "description": "Builds web applications using webpack.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "crossOrigin": {
            "type": "string",
            "description": "The `crossorigin` attribute to use for generated javascript script tags.  One of 'none' | 'anonymous' | 'use-credentials'."
          },
          "main": {
            "type": "string",
            "description": "The name of the main entry-point file.",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.js|.ts|.tsx)"
          },
          "tsConfig": {
            "type": "string",
            "description": "The name of the Typescript configuration file.",
            "x-completion-type": "file",
            "x-completion-glob": "tsconfig.*.json"
          },
          "compiler": {
            "type": "string",
            "description": "The compiler to use.",
            "enum": ["babel", "swc", "tsc"],
            "default": "babel"
          },
          "outputPath": {
            "type": "string",
            "description": "The output path of the generated files.",
            "x-completion-type": "directory"
          },
          "target": {
            "type": "string",
            "alias": "platform",
            "description": "Target platform for the build, same as the Webpack target option.",
            "enum": ["node", "web"],
            "default": "web"
          },
          "deleteOutputPath": {
            "type": "boolean",
            "description": "Delete the output path before building.",
            "default": true
          },
          "watch": {
            "type": "boolean",
            "description": "Enable re-building when files change.",
            "default": false
          },
          "baseHref": {
            "type": "string",
            "description": "Base url for the application being built."
          },
          "deployUrl": {
            "type": "string",
            "description": "URL where the application will be deployed."
          },
          "vendorChunk": {
            "type": "boolean",
            "description": "Use a separate bundle containing only vendor libraries.",
            "default": true
          },
          "commonChunk": {
            "type": "boolean",
            "description": "Use a separate bundle containing code used across multiple bundles.",
            "default": true
          },
          "runtimeChunk": {
            "type": "boolean",
            "description": "Use a separate bundle containing the runtime.",
            "default": true
          },
          "sourceMap": {
            "description": "Output sourcemaps. Use 'hidden' for use with error reporting tools without generating sourcemap comment.",
            "default": true,
            "oneOf": [{ "type": "boolean" }, { "type": "string" }]
          },
          "progress": {
            "type": "boolean",
            "description": "Log progress to the console while building.",
            "default": false
          },
          "assets": {
            "type": "array",
            "description": "List of static application assets.",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "glob": {
                      "type": "string",
                      "description": "The pattern to match."
                    },
                    "input": {
                      "type": "string",
                      "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
                    },
                    "ignore": {
                      "description": "An array of globs to ignore.",
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "output": {
                      "type": "string",
                      "description": "Absolute path within the output."
                    }
                  },
                  "additionalProperties": false,
                  "required": ["glob", "input", "output"]
                },
                { "type": "string" }
              ]
            }
          },
          "index": {
            "type": "string",
            "description": "HTML File which will be contain the application.",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.html|.htm)"
          },
          "scripts": {
            "type": "array",
            "description": "External Scripts which will be included before the main application entry.",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "input": {
                      "type": "string",
                      "description": "The file to include.",
                      "x-completion-type": "file",
                      "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
                    },
                    "bundleName": {
                      "type": "string",
                      "description": "The bundle name for this extra entry point."
                    },
                    "inject": {
                      "type": "boolean",
                      "description": "If the bundle will be referenced in the HTML file.",
                      "default": true
                    }
                  },
                  "additionalProperties": false,
                  "required": ["input"]
                },
                {
                  "type": "string",
                  "description": "The file to include.",
                  "x-completion-type": "file",
                  "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
                }
              ]
            },
            "default": []
          },
          "styles": {
            "type": "array",
            "description": "External Styles which will be included with the application",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "input": {
                      "type": "string",
                      "description": "The file to include.",
                      "x-completion-type": "file",
                      "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
                    },
                    "bundleName": {
                      "type": "string",
                      "description": "The bundle name for this extra entry point."
                    },
                    "inject": {
                      "type": "boolean",
                      "description": "If the bundle will be referenced in the HTML file.",
                      "default": true
                    }
                  },
                  "additionalProperties": false,
                  "required": ["input"]
                },
                {
                  "type": "string",
                  "description": "The file to include.",
                  "x-completion-type": "file",
                  "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
                }
              ]
            },
            "default": []
          },
          "budgets": {
            "description": "Budget thresholds to ensure parts of your application stay within boundaries which you set.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of budget.",
                  "enum": [
                    "all",
                    "allScript",
                    "any",
                    "anyScript",
                    "bundle",
                    "initial"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "The name of the bundle."
                },
                "baseline": {
                  "type": "string",
                  "description": "The baseline size for comparison."
                },
                "maximumWarning": {
                  "type": "string",
                  "description": "The maximum threshold for warning relative to the baseline."
                },
                "maximumError": {
                  "type": "string",
                  "description": "The maximum threshold for error relative to the baseline."
                },
                "minimumWarning": {
                  "type": "string",
                  "description": "The minimum threshold for warning relative to the baseline."
                },
                "minimumError": {
                  "type": "string",
                  "description": "The minimum threshold for error relative to the baseline."
                },
                "warning": {
                  "type": "string",
                  "description": "The threshold for warning relative to the baseline (min & max)."
                },
                "error": {
                  "type": "string",
                  "description": "The threshold for error relative to the baseline (min & max)."
                }
              },
              "additionalProperties": false,
              "required": ["type"]
            },
            "default": []
          },
          "namedChunks": {
            "type": "boolean",
            "description": "Names the produced bundles according to their entry file.",
            "default": true
          },
          "outputHashing": {
            "type": "string",
            "description": "Define the output filename cache-busting hashing mode.",
            "default": "none",
            "enum": ["none", "all", "media", "bundles"]
          },
          "stylePreprocessorOptions": {
            "description": "Options to pass to style preprocessors.",
            "type": "object",
            "properties": {
              "includePaths": {
                "description": "Paths to include. Paths will be resolved to project root.",
                "type": "array",
                "items": { "type": "string" },
                "default": []
              }
            },
            "additionalProperties": false
          },
          "optimization": {
            "description": "Enables optimization of the build output.",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "scripts": {
                    "type": "boolean",
                    "description": "Enables optimization of the scripts output.",
                    "default": true
                  },
                  "styles": {
                    "type": "boolean",
                    "description": "Enables optimization of the styles output.",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              { "type": "boolean" }
            ]
          },
          "generatePackageJson": {
            "type": "boolean",
            "description": "Generates a `package.json` file with the project's `node_module` dependencies populated for installing in a container. If a `package.json` exists in the project's directory, it will be reused with dependencies populated.",
            "default": false
          },
          "transformers": {
            "type": "array",
            "description": "List of TypeScript Compiler Transfomers Plugins.",
            "default": [],
            "aliases": ["tsPlugins"],
            "items": {
              "oneOf": [
                { "type": "string" },
                {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string" },
                    "options": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false,
                  "required": ["name"]
                }
              ]
            }
          },
          "additionalEntryPoints": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entryName": {
                  "type": "string",
                  "description": "Name of the additional entry file."
                },
                "entryPath": {
                  "type": "string",
                  "description": "Path to the additional entry file.",
                  "x-completion-type": "file",
                  "x-completion-glob": "**/*@(.js|.ts)"
                }
              }
            }
          },
          "outputFileName": {
            "type": "string",
            "description": "Name of the main output file.",
            "default": "main.js"
          },
          "externalDependencies": {
            "oneOf": [
              { "type": "string", "enum": ["none", "all"] },
              { "type": "array", "items": { "type": "string" } }
            ],
            "description": "Dependencies to keep external to the bundle. (`all` (default), `none`, or an array of module names)",
            "default": "all"
          },
          "extractCss": {
            "type": "boolean",
            "description": "Extract CSS into a `.css` file.",
            "default": true
          },
          "es2015Polyfills": {
            "description": "Conditional polyfills loaded in browsers which do not support `ES2015`.",
            "type": "string"
          },
          "subresourceIntegrity": {
            "type": "boolean",
            "description": "Enables the use of subresource integrity validation.",
            "default": false
          },
          "polyfills": {
            "type": "string",
            "description": "Polyfills to load before application",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.js|.ts|.tsx)"
          },
          "verbose": {
            "type": "boolean",
            "description": "Emits verbose output",
            "default": false
          },
          "statsJson": {
            "type": "boolean",
            "description": "Generates a 'stats.json' file which can be analyzed using tools such as: 'webpack-bundle-analyzer' or `<https://webpack.github.io/analyse>`.",
            "default": false
          },
          "extractLicenses": {
            "type": "boolean",
            "description": "Extract all licenses in a separate file, in the case of production builds only.",
            "default": false
          },
          "memoryLimit": {
            "type": "number",
            "description": "Memory limit for type checking service process in `MB`.",
            "default": 2048
          },
          "maxWorkers": {
            "type": "number",
            "description": "Number of workers to use for type checking.",
            "default": 2
          },
          "fileReplacements": {
            "description": "Replace files with other files in the build.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string",
                  "description": "The file to be replaced.",
                  "x-completion-type": "file"
                },
                "with": {
                  "type": "string",
                  "description": "The file to replace with.",
                  "x-completion-type": "file"
                }
              },
              "additionalProperties": false,
              "required": ["replace", "with"]
            },
            "default": []
          },
          "buildLibsFromSource": {
            "type": "boolean",
            "description": "Read buildable libraries from source instead of building them separately.",
            "default": true
          },
          "generateIndexHtml": {
            "type": "boolean",
            "description": "Generates `index.html` file to the output path. This can be turned off if using a webpack plugin to generate HTML such as `html-webpack-plugin`.",
            "default": true
          },
          "postcssConfig": {
            "type": "string",
            "description": "Set a path to PostCSS config that applies to the app and all libs. Defaults to `undefined`, which auto-detects postcss.config.js files in each `app`/`lib` directory."
          },
          "webpackConfig": {
            "type": "string",
            "description": "Path to a function which takes a webpack config, some context and returns the resulting webpack config. See https://nx.dev/guides/customize-webpack",
            "x-completion-type": "file",
            "x-completion-glob": "webpack?(*)@(.js|.ts)"
          }
        },
        "required": ["tsConfig", "main"],
        "definitions": {
          "assetPattern": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "glob": {
                    "type": "string",
                    "description": "The pattern to match."
                  },
                  "input": {
                    "type": "string",
                    "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
                  },
                  "ignore": {
                    "description": "An array of globs to ignore.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "output": {
                    "type": "string",
                    "description": "Absolute path within the output."
                  }
                },
                "additionalProperties": false,
                "required": ["glob", "input", "output"]
              },
              { "type": "string" }
            ]
          },
          "budget": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of budget.",
                "enum": [
                  "all",
                  "allScript",
                  "any",
                  "anyScript",
                  "bundle",
                  "initial"
                ]
              },
              "name": {
                "type": "string",
                "description": "The name of the bundle."
              },
              "baseline": {
                "type": "string",
                "description": "The baseline size for comparison."
              },
              "maximumWarning": {
                "type": "string",
                "description": "The maximum threshold for warning relative to the baseline."
              },
              "maximumError": {
                "type": "string",
                "description": "The maximum threshold for error relative to the baseline."
              },
              "minimumWarning": {
                "type": "string",
                "description": "The minimum threshold for warning relative to the baseline."
              },
              "minimumError": {
                "type": "string",
                "description": "The minimum threshold for error relative to the baseline."
              },
              "warning": {
                "type": "string",
                "description": "The threshold for warning relative to the baseline (min & max)."
              },
              "error": {
                "type": "string",
                "description": "The threshold for error relative to the baseline (min & max)."
              }
            },
            "additionalProperties": false,
            "required": ["type"]
          },
          "extraEntryPoint": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "The file to include.",
                    "x-completion-type": "file",
                    "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
                  },
                  "bundleName": {
                    "type": "string",
                    "description": "The bundle name for this extra entry point."
                  },
                  "inject": {
                    "type": "boolean",
                    "description": "If the bundle will be referenced in the HTML file.",
                    "default": true
                  }
                },
                "additionalProperties": false,
                "required": ["input"]
              },
              {
                "type": "string",
                "description": "The file to include.",
                "x-completion-type": "file",
                "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
              }
            ]
          },
          "transformerPattern": {
            "oneOf": [
              { "type": "string" },
              {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "options": { "type": "object", "additionalProperties": true }
                },
                "additionalProperties": false,
                "required": ["name"]
              }
            ]
          }
        },
        "presets": []
      },
      "description": "Run webpack build.",
      "aliases": [],
      "hidden": false,
      "path": "/packages/webpack/src/executors/webpack/schema.json"
    },
    {
      "name": "dev-server",
      "implementation": "/packages/webpack/src/executors/dev-server/dev-server.impl.ts",
      "schema": {
        "title": "Web Dev Server",
        "description": "Serve a web application.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "buildTarget": {
            "type": "string",
            "description": "Target which builds the application."
          },
          "port": {
            "type": "number",
            "description": "Port to listen on.",
            "default": 4200
          },
          "host": {
            "type": "string",
            "description": "Host to listen on.",
            "default": "localhost"
          },
          "ssl": {
            "type": "boolean",
            "description": "Serve using `HTTPS`.",
            "default": false
          },
          "sslKey": {
            "type": "string",
            "description": "SSL key to use for serving `HTTPS`."
          },
          "sslCert": {
            "type": "string",
            "description": "SSL certificate to use for serving `HTTPS`."
          },
          "watch": {
            "type": "boolean",
            "description": "Watches for changes and rebuilds application.",
            "default": true
          },
          "liveReload": {
            "type": "boolean",
            "description": "Whether to reload the page on change, using live-reload.",
            "default": true
          },
          "hmr": {
            "type": "boolean",
            "description": "Enable hot module replacement.",
            "default": false
          },
          "publicHost": {
            "type": "string",
            "description": "Public URL where the application will be served."
          },
          "open": {
            "type": "boolean",
            "description": "Open the application in the browser.",
            "default": false
          },
          "allowedHosts": {
            "type": "string",
            "description": "This option allows you to whitelist services that are allowed to access the dev server."
          },
          "memoryLimit": {
            "type": "number",
            "description": "Memory limit for type checking service process in `MB`."
          },
          "maxWorkers": {
            "type": "number",
            "description": "Number of workers to use for type checking."
          },
          "baseHref": {
            "type": "string",
            "description": "Base url for the application being built."
          }
        },
        "presets": []
      },
      "description": "Serve a web application.",
      "aliases": [],
      "hidden": false,
      "path": "/packages/webpack/src/executors/dev-server/schema.json"
    }
  ]
}
