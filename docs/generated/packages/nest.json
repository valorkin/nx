{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "nest",
  "packageName": "@nrwl/nest",
  "description": "The Nx Plugin for Nest contains executors and generators for allowing your workspace to create powerful Nest best in class APIs.",
  "root": "/packages/nest",
  "source": "/packages/nest/src",
  "documentation": [
    {
      "id": "overview",
      "name": "Overview",
      "path": "/packages/nest",
      "file": "shared/nest-plugin",
      "content": "![NestJS logo](/shared/nest-logo.png)\n\nNest.js is a framework designed for building scalable server-side applications. In many ways, Nest is familiar to Angular developers:\n\n- It has excellent TypeScript support.\n- Its dependency injection system is similar to the one in Angular.\n- It emphasises testability.\n- Its configuration APIs are similar to Angular as well.\n\nMany conventions and best practices used in Angular applications can be also be used in Nest.\n\n## Setting Up Nest\n\nTo create a new workspace with Nest, run the following command:\n\n```shell\nnpx create-nx-workspace my-workspace --preset=nest\n```\n\nYarn users can use the following command instead:\n\n```shell\nyarn create nx-workspace my-workspace --preset=nest\n```\n\nTo add the Nest plugin to an existing workspace, run one the following commands:\n\n```shell\nnpm install -D @nrwl/nest\n```\n\n```shell\nyarn add -D @nrwl/nest\n```\n\n### Create Applications\n\nYou can add a new Nest application with the following command:\n\n```shell\nnx g @nrwl/nest:app my-nest-app\n```\n\n#### Application Proxies\n\nGenerating Nest applications has an option to configure other projects in the workspace to proxy API requests. This can be done by passing the `--frontendProject` with the project name you wish to enable proxy support for.\n\n```shell\nnx g @nrwl/nest:app my-nest-app --frontendProject my-angular-app\n```\n\n### Create Libraries\n\nYou can add a new Nest library with the following command:\n\n```shell\nnx g @nrwl/nest:lib my-nest-lib\n```\n\nTo make the library `buildable`, use the following command:\n\n```shell\nnx g @nrwl/nest:lib my-nest-lib --buildable\n```\n\nTo make the library `publishable`, use the following command:\n\n```shell\nnx g @nrwl/nest:lib my-nest-lib --publishable --importPath=@my-workspace/my-nest-lib\n```\n\n> Read more about [building and publishing libraries here](/more-concepts/buildable-and-publishable-libraries).\n\n### Nest Generators\n\nThe Nest plugin for Nx extends the generators provided by Nest. Any commands that can be used with the Nest CLI can also be used with the `nx` command. The `--project` flag should be used for all Nest generators.\n\n> `--project` is used to infer the root of the project where the generators will generate the files.\n\n## Using Nest\n\n### Build\n\nYou can build an application with the following command:\n\n```shell\nnx build my-nest-app\n```\n\nThis applies to `buildable` libraries as well\n\n```shell\nnx build my-nest-lib\n```\n\n#### Waiting for other builds\n\nSetting the `waitUntilTargets` option with an array of projects (with the following format: `\"project:architect\"`) will execute those commands before serving the Nest application.\n\n### Serve\n\nYou can serve an application with the following command:\n\n```shell\nnx serve my-nest-app\n```\n\nThe `serve` command runs the `build` target, and executes the application.\n\nBy default, the serve command will run in `watch` mode. This allows code to be changed, and the Nest application to be rebuilt automatically.\n\n#### Debugging\n\nNest applications also have the `inspect` flag set, so you can attach your debugger to the running instance.\n\nDebugging is set to use a random port that is available on the system. The port can be changed by setting the port option in the `serve` target in the `project.json`. Or by running the serve command with `--port <number>`.\n\nFor additional information on how to debug Node applications, see the [Node.js debugging getting started guide](https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients).\n\n### Lint\n\nYou can lint an application with the following command:\n\n```shell\nnx lint my-nest-app\n```\n\nYou can lint a library with the following command:\n\n```shell\nnx lint my-nest-lib\n```\n\n### Unit Test\n\nYou can run unit test for an application with the following command:\n\n```shell\nnx test my-nest-app\n```\n\nYou can run unit test for a library with the following command:\n\n```shell\nnx test my-nest-lib\n```\n\n## More Documentation\n\n- [Todo Tutorial](/node-tutorial/01-create-application)\n- [Using Jest](/packages/jest)\n"
    }
  ],
  "generators": [
    {
      "name": "application",
      "factory": "./src/generators/application/application",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestApplicationGenerator",
        "title": "Nx Application Options Schema",
        "description": "Nx Application Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the application.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for the node application?"
          },
          "directory": {
            "description": "The directory of the new application.",
            "type": "string"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipPackageJson": {
            "description": "Do not add dependencies to `package.json`.",
            "type": "boolean",
            "default": false
          },
          "linter": {
            "description": "The tool to use for running lint checks.",
            "type": "string",
            "enum": ["eslint", "none"],
            "default": "eslint"
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "tags": {
            "description": "Add tags to the application (used for linting).",
            "type": "string"
          },
          "frontendProject": {
            "description": "Frontend project that needs to access this application. This sets up proxy configuration.",
            "type": "string"
          },
          "standaloneConfig": {
            "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
            "type": "boolean"
          },
          "setParserOptionsProject": {
            "type": "boolean",
            "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
            "default": false
          }
        },
        "additionalProperties": false,
        "required": ["name"],
        "presets": []
      },
      "aliases": ["app"],
      "x-type": "application",
      "description": "Create a NestJS application.",
      "implementation": "/packages/nest/src/generators/application/application.ts",
      "hidden": false,
      "path": "/packages/nest/src/generators/application/schema.json"
    },
    {
      "name": "convert-tslint-to-eslint",
      "factory": "./src/generators/convert-tslint-to-eslint/convert-tslint-to-eslint#conversionGenerator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "nest-convert-tslint-to-eslint",
        "cli": "nx",
        "title": "Convert a NestJS project from TSLint to ESLint",
        "description": "Convert a NestJS project from TSLint to ESLint. \n_NOTE: Does not work in `--dry-run` mode_.",
        "examples": [
          {
            "command": "nx g convert-tslint-to-eslint myapp",
            "description": "Convert the NestJS project `myapp` from TSLint to ESLint"
          }
        ],
        "type": "object",
        "properties": {
          "project": {
            "description": "The name of the NestJS project to convert.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "Which NestJS project would you like to convert from TSLint to ESLint?"
          },
          "ignoreExistingTslintConfig": {
            "description": "If true we will not use existing TSLint config as a reference, we will just reset the project with the latest recommended ESLint config.",
            "type": "boolean",
            "default": false,
            "x-prompt": "Would you like to ignore the existing TSLint config? Recommended if the TSLint config has not been altered much as it makes the new ESLint config cleaner."
          },
          "removeTSLintIfNoMoreTSLintTargets": {
            "description": "If this conversion leaves no more TSLint usage in the workspace, it will remove TSLint and related dependencies and configuration.",
            "type": "boolean",
            "default": true,
            "x-prompt": "Would you like to remove TSLint and its related config if there are no TSLint projects remaining after this conversion?"
          },
          "skipFormat": {
            "type": "boolean",
            "description": "Skip formatting files.",
            "default": false
          }
        },
        "required": ["project"],
        "presets": []
      },
      "description": "Convert a project from TSLint to ESLint.",
      "implementation": "/packages/nest/src/generators/convert-tslint-to-eslint/convert-tslint-to-eslint#conversionGenerator.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/convert-tslint-to-eslint/schema.json"
    },
    {
      "name": "init",
      "factory": "./src/generators/init/init",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestInitGenerator",
        "title": "Init Nest Plugin",
        "description": "Init Nest Plugin.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "unitTestRunner": {
            "description": "Adds the specified unit test runner.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false,
        "required": [],
        "presets": []
      },
      "description": "Initialize the `@nrwl/nest` plugin.",
      "aliases": ["ng-add"],
      "hidden": true,
      "implementation": "/packages/nest/src/generators/init/init.ts",
      "path": "/packages/nest/src/generators/init/schema.json"
    },
    {
      "name": "library",
      "factory": "./src/generators/library/library",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestLibraryGenerator",
        "title": "Create a NestJS Library for Nx",
        "description": "Create a NestJS Library for Nx.",
        "cli": "nx",
        "type": "object",
        "examples": [
          {
            "command": "nx g lib mylib --directory=myapp",
            "description": "Generate libs/myapp/mylib"
          }
        ],
        "properties": {
          "name": {
            "description": "Library name.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for the library?"
          },
          "directory": {
            "description": "A directory where the library is placed.",
            "type": "string",
            "alias": "dir"
          },
          "linter": {
            "description": "The tool to use for running lint checks.",
            "type": "string",
            "enum": ["eslint", "none"],
            "default": "eslint"
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "tags": {
            "description": "Add tags to the library (used for linting).",
            "type": "string",
            "alias": "t"
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "skipTsConfig": {
            "description": "Do not update tsconfig.base.json for development experience.",
            "type": "boolean",
            "default": false
          },
          "publishable": {
            "description": "Create a publishable library.",
            "type": "boolean"
          },
          "buildable": {
            "description": "Generate a buildable library.",
            "type": "boolean",
            "default": false
          },
          "importPath": {
            "description": "The library name used to import it, like @myorg/my-awesome-lib. Must be a valid npm name.",
            "type": "string"
          },
          "global": {
            "description": "Add the Global decorator to the generated module.",
            "type": "boolean",
            "default": false
          },
          "service": {
            "description": "Include a service with the library.",
            "type": "boolean",
            "default": false
          },
          "controller": {
            "description": "Include a controller with the library.",
            "type": "boolean",
            "default": false
          },
          "testEnvironment": {
            "description": "The test environment for jest, for node applications this should stay as node unless doing DOM testing.",
            "type": "string",
            "enum": ["jsdom", "node"],
            "default": "node"
          },
          "target": {
            "description": "The ES target, Nest suggest using es6 or higher.",
            "type": "string",
            "default": "es6",
            "enum": [
              "es5",
              "es6",
              "esnext",
              "es2015",
              "es2016",
              "es2017",
              "es2018",
              "es2019",
              "es2020"
            ]
          },
          "strict": {
            "description": "Whether to enable tsconfig strict mode or not.",
            "type": "boolean",
            "default": false
          },
          "standaloneConfig": {
            "description": "Split the project configuration into <projectRoot>/project.json rather than including it inside workspace.json",
            "type": "boolean",
            "default": true
          },
          "setParserOptionsProject": {
            "type": "boolean",
            "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
            "default": false
          }
        },
        "additionalProperties": false,
        "required": ["name"],
        "presets": []
      },
      "aliases": ["lib"],
      "x-type": "library",
      "description": "Create a new NestJS library.",
      "implementation": "/packages/nest/src/generators/library/library.ts",
      "hidden": false,
      "path": "/packages/nest/src/generators/library/schema.json"
    },
    {
      "name": "class",
      "factory": "./src/generators/class/class",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestClassGenerator",
        "title": "Nest Class Options Schema",
        "description": "Nest Class Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the class.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest class language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `class` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/class/class.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/class/schema.json"
    },
    {
      "name": "controller",
      "factory": "./src/generators/controller/controller",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestControllerGenerator",
        "title": "Nest Controller Options Schema",
        "description": "Nest Controller Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the controller.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": false
          },
          "language": {
            "description": "Nest controller language.",
            "type": "string",
            "enum": ["js", "ts"]
          },
          "skipImport": {
            "description": "Flag to skip the module import.",
            "type": "boolean",
            "default": false
          },
          "module": {
            "description": "Allows specification of the declaring module.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `controller` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/controller/controller.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/controller/schema.json"
    },
    {
      "name": "decorator",
      "factory": "./src/generators/decorator/decorator",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestDecoratorGenerator",
        "title": "Nest Decorator Options Schema",
        "description": "Nest Decorator Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the decorator.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest decorator language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `decorator` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/decorator/decorator.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/decorator/schema.json"
    },
    {
      "name": "filter",
      "factory": "./src/generators/filter/filter",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestFilterGenerator",
        "title": "Nest Filter Options Schema",
        "description": "Nest Filter Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the filter.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "type": "boolean",
            "description": "Skip formatting files.",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest filter language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `filter` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/filter/filter.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/filter/schema.json"
    },
    {
      "name": "gateway",
      "factory": "./src/generators/gateway/gateway",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestGatewayGenerator",
        "title": "Nest Gateway Options Schema",
        "description": "Nest Gateway Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the gateway.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest gateway language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `gateway` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/gateway/gateway.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/gateway/schema.json"
    },
    {
      "name": "guard",
      "factory": "./src/generators/guard/guard",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestGuardGenerator",
        "title": "Nest Guard Options Schema",
        "description": "Nest Guard Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the guard.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest guard language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `guard` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/guard/guard.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/guard/schema.json"
    },
    {
      "name": "interceptor",
      "factory": "./src/generators/interceptor/interceptor",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestInterceptorGenerator",
        "title": "Nest Interceptor Options Schema",
        "description": "Nest Interceptor Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the interceptor.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest interceptor language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `interceptor` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/interceptor/interceptor.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/interceptor/schema.json"
    },
    {
      "name": "interface",
      "factory": "./src/generators/interface/interface",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestInterfaceGenerator",
        "title": "Nest Interface Options Schema",
        "description": "Nest Interface Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the interface.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `interface` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/interface/interface.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/interface/schema.json"
    },
    {
      "name": "middleware",
      "factory": "./src/generators/middleware/middleware",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestMiddlewareGenerator",
        "title": "Nest Middleware Options Schema",
        "description": "Nest Middleware Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the middleware.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest middleware language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `middleware` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/middleware/middleware.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/middleware/schema.json"
    },
    {
      "name": "module",
      "factory": "./src/generators/module/module",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestModuleGenerator",
        "title": "Nest Module Options Schema",
        "description": "Nest Module Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the module.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": false
          },
          "language": {
            "description": "Nest module language.",
            "type": "string",
            "enum": ["js", "ts"]
          },
          "module": {
            "description": "The path to import the module.",
            "type": "string",
            "format": "path"
          },
          "skipImport": {
            "description": "Flag to skip the module import.",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `module` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/module/module.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/module/schema.json"
    },
    {
      "name": "pipe",
      "factory": "./src/generators/pipe/pipe",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestPipeGenerator",
        "title": "Nest Pipe Options Schema",
        "description": "Nest Pipe Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the pipe.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest pipe language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `pipe` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/pipe/pipe.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/pipe/schema.json"
    },
    {
      "name": "provider",
      "factory": "./src/generators/provider/provider",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestProviderGenerator",
        "title": "Nest Provider Options Schema",
        "description": "Nest Provider Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the provider.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": true
          },
          "language": {
            "description": "Nest provider language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `provider` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/provider/provider.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/provider/schema.json"
    },
    {
      "name": "resolver",
      "factory": "./src/generators/resolver/resolver",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestResolverGenerator",
        "title": "Nest Resolver Options Schema",
        "description": "Nest Resolver Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the resolver.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": false
          },
          "language": {
            "description": "Nest resolver language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `resolver` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/resolver/resolver.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/resolver/schema.json"
    },
    {
      "name": "resource",
      "factory": "./src/generators/resource/resource",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestResourceGenerator",
        "title": "Nest Resource Options Schema",
        "description": "Nest Resource Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use for this resource (plural, e.g., `users`)?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": false
          },
          "language": {
            "description": "Nest class language.",
            "type": "string",
            "enum": ["js", "ts"]
          },
          "type": {
            "type": "string",
            "description": "The transport layer.",
            "default": "rest",
            "enum": [
              "rest",
              "graphql-code-first",
              "graphql-schema-first",
              "microservice",
              "ws"
            ],
            "x-prompt": {
              "message": "What transport layer do you use?",
              "type": "list",
              "items": [
                { "value": "rest", "label": "REST API" },
                {
                  "value": "graphql-code-first",
                  "label": "GraphQL (code first)"
                },
                {
                  "value": "graphql-schema-first",
                  "label": "GraphQL (schema first)"
                },
                { "value": "microservice", "label": "Microservice (non-HTTP)" },
                { "value": "ws", "label": "WebSockets" }
              ]
            }
          },
          "skipImport": {
            "type": "boolean",
            "description": "Flag to skip the module import.",
            "default": false
          },
          "crud": {
            "type": "boolean",
            "description": "When true, CRUD entry points are generated.",
            "default": true,
            "x-prompt": {
              "message": "Would you like to generate CRUD entry points?",
              "type": "confirmation"
            }
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `resource` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/resource/resource.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/resource/schema.json"
    },
    {
      "name": "service",
      "factory": "./src/generators/service/service",
      "schema": {
        "$schema": "http://json-schema.org/schema",
        "$id": "NxNestServiceGenerator",
        "title": "Nest Service Options Schema",
        "description": "Nest Service Options Schema.",
        "cli": "nx",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the service.",
            "type": "string",
            "$default": { "$source": "argv", "index": 0 },
            "x-prompt": "What name would you like to use?"
          },
          "project": {
            "description": "The Nest project to target.",
            "type": "string",
            "$default": { "$source": "projectName" },
            "alias": "p",
            "x-prompt": "What Nest project would you like to target?"
          },
          "directory": {
            "description": "Directory where the generated files are placed.",
            "type": "string",
            "aliases": ["dir", "path"]
          },
          "skipFormat": {
            "description": "Skip formatting files.",
            "type": "boolean",
            "default": false
          },
          "unitTestRunner": {
            "description": "Test runner to use for unit tests.",
            "type": "string",
            "enum": ["jest", "none"],
            "default": "jest"
          },
          "flat": {
            "description": "Flag to indicate if a directory is created.",
            "type": "boolean",
            "default": false
          },
          "language": {
            "description": "Nest service language.",
            "type": "string",
            "enum": ["js", "ts"]
          }
        },
        "additionalProperties": false,
        "required": ["name", "project"],
        "presets": []
      },
      "description": "Run the `service` NestJS generator with Nx project support.",
      "implementation": "/packages/nest/src/generators/service/service.ts",
      "aliases": [],
      "hidden": false,
      "path": "/packages/nest/src/generators/service/schema.json"
    }
  ],
  "executors": []
}
